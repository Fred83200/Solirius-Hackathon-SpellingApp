{"version":3,"sources":["App/HomePage/HomePage.tsx","App/QuizPage/Word/Word.tsx","App/QuizPage/QuizPage.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","className","to","Word","props","markIcon","result","placeholder","Array","word","length","fill","join","number","type","QuizPage","useState","quiz","words","results","map","w","i","key","App","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAIO,SAASA,IACd,OACE,6BAASC,UAAU,yBACjB,yBAAKA,UAAU,aACb,uBAAGA,UAAU,QAAb,KACA,4CACA,qFACA,2BACE,kBAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,6BAA3B,eACA,kBAAC,IAAD,CAAMC,GAAG,UAAUD,UAAU,0BAA7B,kB,kBCVH,SAASE,EAAKC,GACnB,IAAMC,EAAmC,qBAAjBD,EAAME,OAC1B,GACAF,EAAME,OACJ,OACA,QAEAC,EAAc,IAAIC,MAAMJ,EAAMK,KAAKC,QAAQC,KAAK,KAAKC,KAAK,KAEhE,OACE,yBAAKX,UAAU,mCACb,0BAAMA,UAAU,0BAA2BG,EAAMS,OAAjD,KACA,yBAAKZ,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,WAEF,2BAAOa,KAAK,OAAOb,UAAU,eAAeM,YAAaA,IACzD,8BAAQF,IChBP,SAASU,EAASX,GAAuB,IAAD,EAC9BY,mBAASZ,EAAMa,MAYvB,CACLC,MAAO,CAAC,OAAQ,OAAQ,UAAW,QAAS,SAAU,WAbjDD,EADsC,sBAE3BD,mBAAS,IAApBG,EAFsC,oBAI7C,OACE,6BAASlB,UAAU,yBACfgB,EAAKC,MAAME,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAAC,EAAD,CAAMC,IAAKD,EAAGb,KAAMY,EAAGR,OAAQS,EAAI,EAAGhB,OAAQa,EAAQG,QACjF,4BAAQrB,UAAU,uBAAlB,SCLC,SAASuB,IACd,OACE,kBAAC,IAAD,KACE,gCACE,yBAAKvB,UAAU,wCACb,yBAAKA,UAAU,4CACb,uBAAGwB,KAAK,IAAIxB,UAAU,0CACpB,iDAEF,4BAAQA,UAAU,iBAAiBa,KAAK,SAASY,cAAY,WAAWC,cAAY,gBAC5EC,gBAAc,eAAeC,gBAAc,QAAQC,aAAW,qBACpE,0BAAM7B,UAAU,4BAKxB,0BAAM8B,KAAK,QACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAACjB,EAAD,OAEF,kBAAC,IAAD,CAAOiB,KAAK,WAGZ,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,SAIN,gCACE,yBAAK/B,UAAU,aAAf,0CCvBYgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAChB,EAAD,OAEFiB,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.238b8023.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport \"./HomePage.css\";\n\nexport function HomePage() {\n  return (\n    <section className=\"jumbotron text-center\">\n      <div className=\"container\">\n        <p className=\"logo\">A</p>\n        <h1>Spelling App</h1>\n        <p>Teach your child to read real good. Or is it gooderer?</p>\n        <p>\n          <Link to=\"/quiz\" className=\"btn btn-primary my-2 mr-2\">Quick Start</Link>\n          <Link to=\"/create\" className=\"btn btn-secondary my-2\">Create Quiz</Link>\n        </p>\n      </div>\n    </section>\n  )\n}\n","import React from \"react\";\nimport \"./Word.css\";\n\nexport function Word(props: WordProps) {\n  const markIcon = typeof props.result === \"undefined\"\n    ? \"\"\n    : props.result\n      ? \"tick\"\n      : \"cross\";\n\n  const placeholder = new Array(props.word.length).fill(\"_\").join(\" \");\n\n  return (\n    <div className=\"input-group input-group-lg my-3\">\n      <span className=\"number-text text-muted\">{ props.number })</span>\n      <div className=\"input-group-prepend\">\n        <span className=\"input-group-text\">&#9654;</span>\n      </div>\n      <input type=\"text\" className=\"form-control\" placeholder={placeholder}/>\n      <span>{ markIcon }</span>\n    </div>\n  );\n}\n\ninterface WordProps {\n  number: number,\n  word: string,\n  result?: boolean\n}\n","import React, { useState } from \"react\";\nimport { Word } from \"./Word/Word\";\n\nexport function QuizPage(props: QuizPageProps) {\n  const [quiz] = useState(props.quiz || generateRandomQuiz());\n  const [results] = useState([] as boolean[]);\n\n  return (\n    <section className=\"container text-center\">\n      { quiz.words.map((w, i) => <Word key={i} word={w} number={i + 1} result={results[i]}/>) }\n      <button className=\"btn btn-primary m-3\">Mark</button>\n    </section>\n  )\n}\n\nfunction generateRandomQuiz(): Quiz {\n  return {\n    words: [\"fish\", \"goat\", \"chicken\", \"pizza\", \"banana\", \"apple\"]\n  };\n}\n\nexport interface QuizPageProps {\n  quiz?: Quiz\n}\n\nexport interface Quiz {\n  words: string[]\n}\n","import React from 'react';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport { HomePage } from './HomePage/HomePage';\nimport { QuizPage } from './QuizPage/QuizPage';\n\nexport function App() {\n  return (\n    <HashRouter>\n      <header>\n        <div className=\"navbar navbar-dark bg-dark shadow-sm\">\n          <div className=\"container d-flex justify-content-between\">\n            <a href=\"/\" className=\"navbar-brand d-flex align-items-center\">\n              <strong>Spelling App</strong>\n            </a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarHeader\"\n                    aria-controls=\"navbarHeader\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n          </div>\n        </div>\n      </header>\n      <main role=\"main\">\n        <Switch>\n          <Route path=\"/quiz\">\n            <QuizPage />\n          </Route>\n          <Route path=\"/users\">\n            {/*<CreatePage />*/}\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </main>\n      <footer>\n        <div className=\"container\">\n          &copy; Solirius Hackathon Winners 2020\n        </div>\n      </footer>\n    </HashRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}