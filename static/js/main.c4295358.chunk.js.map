{"version":3,"sources":["App/HomePage/HomePage.tsx","App/QuizPage/Question/Question.tsx","App/QuizPage/QuizPage.tsx","App/CreatePage/CreateQuestion/CreateQuestion.tsx","App/CreatePage/CreatePage.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","className","to","RICIBs","require","default","AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","speechParams","OutputFormat","Text","VoiceId","signer","Polly","Presigner","audio","Audio","Question","props","useState","soundPlaying","setSoundPlaying","buttonChar","markIcon","result","every","r","icon","faCheck","style","color","faTimes","playAudio","speech","Promise","resolve","getSynthesizeSpeechUrl","error","url","console","log","src","play","onended","onClickPlay","a","question","word","sentence","inputProps","reveal","Array","length","fill","map","_","i","value","placeholder","o","number","onClick","amount","handleOutputString","onUpdate","inputRegExp","randomWords","QuizPage","location","useLocation","locationQuiz","state","quiz","generateRandomQuiz","setQuiz","Math","random","questionKey","setQuestionKey","results","setResults","questions","answers","setAnswers","setReveal","onUpdateAnswer","answer","q","key","toLowerCase","split","char","charAt","checkAnswer","markQuiz","CreateQuestion","setWord","undefined","setSentence","type","onChange","e","newWord","currentTarget","newSentence","CreatePage","setQuestions","filter","pathname","App","basename","process","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c4295358.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport \"./HomePage.css\";\n\nexport function HomePage() {\n  return (\n    <section className=\"jumbotron text-center\">\n      <div className=\"container\">\n        <p className=\"logo\">abc</p>\n        <h1>Spelling App</h1>\n        <p>Teach your child to read real good. Or is it gooderer?</p>\n        <p>\n          <Link to=\"/quiz\" className=\"btn btn-primary my-2 mr-2\">Quick Start</Link>\n          <Link to=\"/create\" className=\"btn btn-secondary my-2\">Create Quiz</Link>\n        </p>\n      </div>\n    </section>\n  )\n}\n","import React, {useState} from \"react\";\nimport \"./Question.css\";\nimport {WordResult} from \"../QuizPage\";\nimport AWS from \"aws-sdk\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst RICIBs = require(\"react-individual-character-input-boxes2\").default;\n\nAWS.config.region = 'us-east-2';\nAWS.config.credentials = new AWS.CognitoIdentityCredentials(\n    {IdentityPoolId: 'us-east-2:d17e443c-5c74-4812-9b45-ffe150848407'});\nconst speechParams = {\n    OutputFormat: 'mp3',\n    Text: '',\n    VoiceId: 'Amy'\n};\nconst signer = new AWS.Polly.Presigner();\nconst audio = new Audio();\n\nexport function Question(props: QuestionProps) {\n    const [soundPlaying, setSoundPlaying] = useState(false);\n    const buttonChar = soundPlaying ? \"■\" : \"▶\";\n    const markIcon = typeof props.result === \"undefined\"\n        ? \"\"\n        : props.result.every(r => r)\n            ? <FontAwesomeIcon icon={faCheck} style={{color: 'green'}} className='logo-check' />\n            : <FontAwesomeIcon icon={faTimes} style={{color: 'red'}} className='logo-wrong'/>;\n\n    const onChange = (value: string) => {\n        props.onUpdate(props.number, value);\n    };\n\n\n    const playAudio = (speech: string) => {\n     return new Promise((resolve) => {\n       speechParams.Text = speech;\n\n       signer.getSynthesizeSpeechUrl(speechParams,  (error: Error, url: string) => {\n         if (error) {\n           console.log(error);\n         } else {\n           audio.src = url;\n           audio.play();\n           audio.onended = resolve;\n         }\n       })\n     })\n    };\n\n    const onClickPlay = async () => {\n      setSoundPlaying(!soundPlaying);\n      if (!soundPlaying) {\n          await playAudio(props.question.word);\n          if (props.question.sentence) { await playAudio(props.question.sentence) };\n      } else {\n          audio.src = '';\n      }\n      setSoundPlaying(false);\n    };\n\n    const inputProps = !props.reveal ? new Array(props.question.word.length)\n        .fill({placeholder: '_'})\n        .map((o, i) => props.result && !props.result[i] ? {...o, className: \"box-red\"} : o)\n        : new Array(props.question.word.length)\n            .fill(null)\n            .map((_, i) => ({value: props.question.word[i]}));\n\n    return (\n        <div className=\"input-group input-group-lg my-3\">\n            <span className=\"number-text text-muted\">{props.number + 1})</span>\n            <div className=\"input-group-prepend\">\n                <span className=\"input-group-text btn sound-playing\" onClick={onClickPlay}>{buttonChar}</span>\n            </div>\n\n      <label className=\"question-input form-control form-control-lg\">\n        <RICIBs\n          amount={props.question.word.length}\n          handleOutputString={onChange}\n          inputRegExp={/^[a-zA-Z0-9_.-]*$/ }\n          inputProps={ inputProps }\n        />\n      </label>\n      <span>{ markIcon }</span>\n    </div>\n  );\n}\n\nexport interface QuestionProps {\n    number: number,\n    question: QuizQuestion,\n    result?: WordResult\n    onUpdate: (number: number, answer: string) => any\n    reveal: boolean,\n}\n\nexport interface QuizQuestion {\n    word: string,\n    sentence?: string\n}\n","import React, { useState } from \"react\";\nimport { Question, QuizQuestion } from \"./Question/Question\";\nimport { useLocation } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nconst randomWords = require('random-words');\n\nexport function QuizPage() {\n  const location = useLocation<{ quiz: Quiz }>();\n  const locationQuiz = location.state && location.state.quiz;\n  const [quiz, setQuiz] = useState(locationQuiz || generateRandomQuiz());\n  const [questionKey, setQuestionKey] = useState(Math.random());\n  const [results, setResults] = useState([] as WordResult[]);\n  const [answers, setAnswers] = useState(new Array(quiz.questions.length) as string[]);\n  const [reveal, setReveal] = useState(false);\n\n  const onClickMark = () => {\n    setResults(markQuiz(quiz, answers));\n  };\n\n  const onClickReveal = () => {\n    console.log(reveal);\n    setReveal(!reveal);\n  };\n\n  const onUpdateAnswer = (i: number, answer: string) => {\n    answers[i] = answer;\n    setAnswers(answers);\n  };\n\n  const onNewQuiz = () => {\n    setAnswers(new Array(quiz.questions.length));\n    setResults([]);\n    setQuiz(generateRandomQuiz());\n    setQuestionKey(Math.random());\n  };\n\n  return (\n    <section className=\"container\">\n      <p className=\"my-3\">Enter your answers below. Press the &#9654; button to hear the word.</p>\n      { quiz.questions.map((q, i) => <Question key={questionKey + i} question={q} number={i} result={results[i]} reveal={reveal} onUpdate={onUpdateAnswer}/>)  }\n\n      <div className=\"container text-center\">\n        <Link className=\"btn btn-secondary btn-lg my-3\" to=\"/\">Home</Link>\n        <button className=\"btn btn-secondary btn-lg my-3 ml-3\" onClick={onNewQuiz}>New Quiz</button>\n        <button className=\"btn btn-secondary btn-lg my-3 ml-3\" onClick={onClickReveal}>Reveal Answers</button>\n        <button className=\"btn btn-primary btn-lg my-3 ml-3\" onClick={onClickMark}>Mark Answers</button>\n      </div>\n    </section>\n  );\n}\n\nfunction generateRandomQuiz(): Quiz {\n  return {\n    questions: randomWords(8).map((word: string) => ({ word }))\n  };\n}\n\nfunction markQuiz(quiz: Quiz, answers: string[]): boolean[][] {\n  return answers.map((answer, i) => checkAnswer(quiz.questions[i].word, answer));\n}\n\nfunction checkAnswer(word: string, answer: string): boolean[] {\n  return answer\n    .toLowerCase()\n    .split(\"\")\n    .map((char, i) => char === word.charAt(i).toLowerCase());\n}\n\nexport interface Quiz {\n  questions: QuizQuestion[]\n}\n\n/**\n * outcome of each character match\n */\nexport type WordResult = boolean[];\n","import { QuizQuestion } from \"../../QuizPage/Question/Question\";\nimport React, { FormEvent, useState } from \"react\";\n\nexport function CreateQuestion(props: CreateQuestionProps) {\n  const [word, setWord] = useState(\"\");\n  const [sentence, setSentence] = useState(undefined as string | undefined);\n\n  const onWordChange = (e: FormEvent<HTMLInputElement>) => {\n    const newWord = e.currentTarget.value;\n    setWord(newWord);\n    props.onUpdate(props.number, { word: newWord, sentence });\n  };\n\n  const onSentenceChange = (e: FormEvent<HTMLInputElement>) => {\n    const newSentence = e.currentTarget.value;\n    setSentence(newSentence);\n    props.onUpdate(props.number, { sentence: newSentence, word });\n  };\n\n  return (\n    <div className=\"row my-3\">\n      <div className=\"col-1\">\n        <span className=\"number-text text-muted\">{ props.number + 1 })</span>\n      </div>\n      <div className=\"col-3\">\n        <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Word\" value={word} onChange={onWordChange}/>\n      </div>\n      <div className=\"col-8\">\n        <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Example of word in a sentence (optional)\" value={sentence} onChange={onSentenceChange}/>\n      </div>\n    </div>\n  );\n}\n\nexport interface CreateQuestionProps {\n  number: number,\n  onUpdate: (i: number, question: QuizQuestion) => any\n}\n","import React, { useState } from \"react\";\nimport { QuizQuestion } from \"../QuizPage/Question/Question\";\nimport { Link } from \"react-router-dom\";\nimport { CreateQuestion } from \"./CreateQuestion/CreateQuestion\";\n\nexport function CreatePage() {\n  const [questions, setQuestions] = useState(new Array(5).fill({ word: \"\" }));\n\n  const onUpdateAnswer = (i: number, question: QuizQuestion) => {\n    questions[i] = question;\n    setQuestions([...questions]);\n  };\n\n  const onAddAnother = () => {\n    setQuestions([...questions, { word: \"\" }]);\n  };\n\n  const quiz = {\n    questions: questions.filter(q => q.word !== \"\")\n  };\n\n  return (\n    <section className=\"container\">\n      <p className=\"my-3\">Enter words below for the quiz below. You can also add an example of the word in use.</p>\n      { questions.map((q, i) => <CreateQuestion key={i} number={i} onUpdate={onUpdateAnswer}/>) }\n\n\n      <div className=\"container text-center\">\n        <button className=\"btn btn-secondary btn-lg my-3\" onClick={onAddAnother}>Add Another Question</button>\n        <Link className=\"btn btn-primary btn-lg my-3 ml-3\" to={{ pathname: \"/quiz\", state: { quiz } }}>Start Quiz</Link>\n      </div>\n    </section>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport { HomePage } from './HomePage/HomePage';\nimport { QuizPage } from './QuizPage/QuizPage';\nimport { CreatePage } from './CreatePage/CreatePage';\n\nexport function App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <header>\n        <div className=\"navbar navbar-dark bg-dark shadow-sm\">\n          <div className=\"container d-flex justify-content-between\">\n            <Link to=\"/\" className=\"navbar-brand d-flex align-items-center\">\n              <strong>Spelling App</strong>\n            </Link>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarHeader\"\n                    aria-controls=\"navbarHeader\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n          </div>\n        </div>\n      </header>\n      <main role=\"main\">\n        <Switch>\n          <Route path=\"/quiz\">\n            <QuizPage />\n          </Route>\n          <Route path=\"/create\">\n            <CreatePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </main>\n      <footer>\n        <div className=\"container\">\n          &copy; Solirius Hackathon Winners 2020\n        </div>\n      </footer>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}