{"version":3,"sources":["App/HomePage/HomePage.tsx","App/QuizPage/Question/Question.tsx","App/QuizPage/QuizPage.tsx","App/CreatePage/CreateQuestion/CreateQuestion.tsx","App/CreatePage/CreatePage.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","className","to","Question","props","useState","value","setValue","soundPlaying","setSoundPlaying","buttonChar","markIcon","result","placeholder","Array","question","word","length","fill","join","number","onClick","setTimeout","type","onChange","e","currentTarget","onUpdate","QuizPage","location","useLocation","locationQuiz","state","quiz","questions","sentence","results","setResults","answers","setAnswers","onUpdateAnswer","i","answer","map","q","key","toLowerCase","split","findIndex","char","charAt","checkAnswer","markQuiz","CreateQuestion","setWord","undefined","setSentence","newWord","newSentence","CreatePage","setQuestions","filter","pathname","App","basename","process","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e35a505f.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport \"./HomePage.css\";\n\nexport function HomePage() {\n  return (\n    <section className=\"jumbotron text-center\">\n      <div className=\"container\">\n        <p className=\"logo\">abc</p>\n        <h1>Spelling App</h1>\n        <p>Teach your child to read real good. Or is it gooderer?</p>\n        <p>\n          <Link to=\"/quiz\" className=\"btn btn-primary my-2 mr-2\">Quick Start</Link>\n          <Link to=\"/create\" className=\"btn btn-secondary my-2\">Create Quiz</Link>\n        </p>\n      </div>\n    </section>\n  )\n}\n","import React, { FormEvent, useState } from \"react\";\nimport \"./Question.css\";\nimport { WordResult } from \"../QuizPage\";\n\nexport function Question(props: QuestionProps) {\n  const [value, setValue] = useState(\"\");\n  const [soundPlaying, setSoundPlaying] = useState(false);\n  const buttonChar = soundPlaying ? \"■\" : \"▶\";\n  const markIcon = typeof props.result === \"undefined\"\n    ? \"\"\n    : props.result === -1\n      ? \"tick\"\n      : \"cross\";\n\n  const placeholder = new Array(props.question.word.length).fill(\"_\").join(\" \");\n\n  const onChange = (e: FormEvent<HTMLInputElement>) => {\n    setValue(e.currentTarget.value);\n    props.onUpdate(props.number, e.currentTarget.value);\n  }\n\n  const onClickPlay = () => {\n    setSoundPlaying(!soundPlaying);\n\n    // sound is playing, ignore the !\n    if (!soundPlaying) {\n      setTimeout(() => setSoundPlaying(false), 500);\n      // play props.word + \". \" props.sentence\n    }\n    else {\n      // stop playback\n    }\n  };\n\n  return (\n    <div className=\"input-group input-group-lg my-3\">\n      <span className=\"number-text text-muted\">{ props.number + 1 })</span>\n      <div className=\"input-group-prepend\">\n        <span className=\"input-group-text btn sound-playing\" onClick={onClickPlay}>{buttonChar}</span>\n      </div>\n      <input type=\"text\" className=\"form-control\" placeholder={placeholder} value={value} onChange={onChange}/>\n      <span>{ markIcon }</span>\n    </div>\n  );\n}\n\nexport interface QuestionProps {\n  number: number,\n  question: QuizQuestion,\n  result?: WordResult\n  onUpdate: (number: number, answer: string) => any\n}\n\nexport interface QuizQuestion {\n  word: string,\n  sentence?: string\n}","import React, { useState } from \"react\";\nimport { Question, QuizQuestion } from \"./Question/Question\";\nimport { useLocation } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nexport function QuizPage() {\n  const location = useLocation<{ quiz: Quiz }>();\n  const locationQuiz = location.state && location.state.quiz;\n  const [quiz] = useState(locationQuiz || generateRandomQuiz());\n  const [results, setResults] = useState([] as WordResult[]);\n  const [answers, setAnswers] = useState(new Array(quiz.questions.length) as string[]);\n\n  const onClickMark = () => {\n    setResults(markQuiz(quiz, answers));\n  };\n\n  const onUpdateAnswer = (i: number, answer: string) => {\n    answers[i] = answer;\n    setAnswers(answers);\n  }\n\n  return (\n    <section className=\"container\">\n      <p className=\"my-3\">Enter your answers below. Press the &#9654; button to hear the word.</p>\n      { quiz.questions.map((q, i) => <Question key={i} question={q} number={i} result={results[i]} onUpdate={onUpdateAnswer}/>) }\n\n      <div className=\"container text-center\">\n        <Link className=\"btn btn-secondary btn-lg my-3\" to=\"/\">Home</Link>\n        <button className=\"btn btn-primary btn-lg my-3 ml-3\" onClick={onClickMark}>Mark Answers</button>\n      </div>\n    </section>\n  );\n}\n\nfunction generateRandomQuiz(): Quiz {\n  return {\n    questions: [\n      { word: \"fish\", sentence: \"I like to fish by the sea\" },\n      { word: \"goat\", sentence: \"The hairy goat ran away\" },\n      { word: \"chicken\", sentence: \"The chicken went beeerk\" },\n      { word: \"pizza\", sentence: \"I put a pizza in the oven\" },\n      { word: \"banana\", sentence: \"I slipped on the banana skin\" },\n      { word: \"apple\", sentence: \"I shot an apple off my sisters head\" }\n    ]\n  };\n}\n\nfunction markQuiz(quiz: Quiz, answers: string[]): number[] {\n  return answers.map((answer, i) => checkAnswer(quiz.questions[i].word, answer));\n}\n\nfunction checkAnswer(word: string, answer: string): number {\n  return answer\n    .toLowerCase()\n    .split(\"\")\n    .findIndex((char, i) => char !== word.charAt(i).toLowerCase());\n}\n\nexport interface Quiz {\n  questions: QuizQuestion[]\n}\n\n/**\n * Index of failure, or -1 if spelling is correct\n */\nexport type WordResult = number;","import { QuizQuestion } from \"../../QuizPage/Question/Question\";\nimport React, { FormEvent, useState } from \"react\";\n\nexport function CreateQuestion(props: CreateQuestionProps) {\n  const [word, setWord] = useState(\"\");\n  const [sentence, setSentence] = useState(undefined as string | undefined);\n\n  const onWordChange = (e: FormEvent<HTMLInputElement>) => {\n    const newWord = e.currentTarget.value;\n    setWord(newWord);\n    props.onUpdate(props.number, { word: newWord, sentence });\n  };\n\n  const onSentenceChange = (e: FormEvent<HTMLInputElement>) => {\n    const newSentence = e.currentTarget.value;\n    setSentence(newSentence);\n    props.onUpdate(props.number, { sentence: newSentence, word });\n  };\n\n  return (\n    <div className=\"row my-3\">\n      <div className=\"col-1\">\n        <span className=\"number-text text-muted\">{ props.number + 1 })</span>\n      </div>\n      <div className=\"col-3\">\n        <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Word\" value={word} onChange={onWordChange}/>\n      </div>\n      <div className=\"col-8\">\n        <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Example of word in a sentence (optional)\" value={sentence} onChange={onSentenceChange}/>\n      </div>\n    </div>\n  );\n}\n\nexport interface CreateQuestionProps {\n  number: number,\n  onUpdate: (i: number, question: QuizQuestion) => any\n}\n","import React, { useState } from \"react\";\nimport { QuizQuestion } from \"../QuizPage/Question/Question\";\nimport { Link } from \"react-router-dom\";\nimport { CreateQuestion } from \"./CreateQuestion/CreateQuestion\";\n\nexport function CreatePage() {\n  const [questions, setQuestions] = useState(new Array(5).fill({ word: \"\" }));\n\n  const onUpdateAnswer = (i: number, question: QuizQuestion) => {\n    questions[i] = question;\n    setQuestions([...questions]);\n  };\n\n  const onAddAnother = () => {\n    setQuestions([...questions, { word: \"\" }]);\n  };\n\n  const quiz = {\n    questions: questions.filter(q => q.word !== \"\")\n  };\n\n  return (\n    <section className=\"container\">\n      <p className=\"my-3\">Enter words below for the quiz below. You can also add an example of the word in use.</p>\n      { questions.map((q, i) => <CreateQuestion key={i} number={i} onUpdate={onUpdateAnswer}/>) }\n\n\n      <div className=\"container text-center\">\n        <button className=\"btn btn-secondary btn-lg my-3\" onClick={onAddAnother}>Add Another Question</button>\n        <Link className=\"btn btn-primary btn-lg my-3 ml-3\" to={{ pathname: \"/quiz\", state: { quiz } }}>Start Quiz</Link>\n      </div>\n    </section>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport { HomePage } from './HomePage/HomePage';\nimport { QuizPage } from './QuizPage/QuizPage';\nimport { CreatePage } from './CreatePage/CreatePage';\n\nexport function App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <header>\n        <div className=\"navbar navbar-dark bg-dark shadow-sm\">\n          <div className=\"container d-flex justify-content-between\">\n            <Link to=\"/\" className=\"navbar-brand d-flex align-items-center\">\n              <strong>Spelling App</strong>\n            </Link>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarHeader\"\n                    aria-controls=\"navbarHeader\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n          </div>\n        </div>\n      </header>\n      <main role=\"main\">\n        <Switch>\n          <Route path=\"/quiz\">\n            <QuizPage />\n          </Route>\n          <Route path=\"/create\">\n            <CreatePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </main>\n      <footer>\n        <div className=\"container\">\n          &copy; Solirius Hackathon Winners 2020\n        </div>\n      </footer>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}